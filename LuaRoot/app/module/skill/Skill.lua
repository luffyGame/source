---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wangliang.
--- DateTime: 2018/4/8 下午3:10
--- 技能的释放过程：1.检查，2.播放释放动作，3，算伤害
---
local random = math.random
local SkillImplClss = require("app.module.skill.SkillImpl")
local ESkillType = {
    NEAR = 1,--近战
    FAR = 2,--远程
}
local CfgData = CfgData
local Skill = class("Skill")
function Skill:ctor(skillId)
    self.id = skillId
    self.stub = CfgData:GetSkill(skillId)
end

function Skill:IsAimSelf()
    return self.stub.aim == 2
end

function Skill:IsAimEnemy()
    return self.stub.aim == 1
end

function Skill:IsNear()
    return self.stub.skillType == ESkillType.NEAR
end

function Skill:IsFar()
    return self.stub.skillType == ESkillType.FAR
end

function Skill:IsSneakCrit()
    return self.stub.sneak
end

function Skill:GetSkillType()
    return self.stub.skillType
end

function Skill:GetPerformAct()
    return self.stub.anime
end

function Skill:GetPerformMaxRange()
    return self.stub.rangeMax
end

function Skill:GetPerformMinRange()
    return self.stub.rangeMin
end

function Skill:GetRange()
    return self.stub.rangeMin or self.stub.rangeMax
end

function Skill:GetAreaType()
    return self.stub.rangeType
end

function Skill:GetAreaPivot()
    return self.stub.rangeData1
end

function Skill:GetAreaParam()
    return self.stub.rangeData2
end

--技能释放不受控制时间，它应该比击中时间长
function Skill:GetUncontrolTime()
    return self.stub.unControlTime
end

function Skill:GetHitTime()
    return self.stub.hitTime
end

function Skill:GetParam()
    return self.stub.skillParam
end

function Skill:OnlyBuff()
    return self.stub.buff
end

function Skill:GetTargetBuff()
    return self.stub.aimBuff
end

function Skill:BuffOnlyMain()
    return self.stub.aimLinit == 1
end

function Skill:GetSelfBuff()
    return self.stub.selfBuff
end

function Skill:CanPerform()
    if self.impl and not self.impl:CanPlay() then
        return false
    end
    return true
end

function Skill:GetCd()
    return self.stub.cd
end

function Skill:GetPerformEffect()
    return self.stub.atkEffect
end

function Skill:GetPerformEffectTime()
    return self.stub.atkEffectStart
end

function Skill:GetPerformEffectPoint()
    return self.stub.atkEffectPoint
end

function Skill:GetFlyType()
    return self.stub.flyType
end
--弹道技能
function Skill:IsBallistic()
    return self.stub.flyType ~= nil
end

function Skill:GetFlySpeed()
    return self.stub.flySpeed
end

function Skill:GetFlyEffect()
    return self.stub.flyEffect
end

function Skill:GetHitPart()
    return self.stub.hitPart
end

function Skill:GetHitEffect()
    return self.stub.hitEffect
end

function Skill:IsRushSkill()
    return self.stub.rangeMin ~= nil
end

function Skill:GetPerformAiRange()
    return self.stub.skillAIDetection
end

function Skill:GetDieType()
    return self.stub.dieType
end

function Skill:GetPower()
    return self.stub.sawPower - 1
end

function Skill:GetSawPart()
    return self.stub.sawPart
end

function Skill:GetSawOtherPart()
    if self.stub.sawPowerNumDown and self.stub.sawPowerNumUp then
        return random(self.stub.sawPowerNumDown,self.stub.sawPowerNumUp)
    end
    return 0
end

--是否无差别，无差别的话，包括自己
function Skill:IsUnDiff()
    return self.stub.damageType == 2
end

function Skill:ShowWarn()
    return self.stub.warnCircle
end

function Skill:IsProduce()
    return self.isProduce
end

function Skill:GetWeapon()
    return self.weapon
end

function Skill:Perform(user,target,isSneak)
    self:GetImpl():Perform(user,target,isSneak)
end

function Skill:IsPerform()
    if self.impl then
        return self.impl.isPerform
    else
        return false
    end
end

function Skill:Cancel()
    if self.impl then
        self.impl:Cancel()
    end
end

function Skill:GetImpl()
    if not self.impl then
        local implCls = SkillImplClss[self:GetSkillType()]
        if not implCls then
            print("<color=red> 没有当前技能类型",self:GetSkillType()," </color>")
            return
        end
        self.impl = implCls.new(self)
    end
    return self.impl
end

function Skill:Update(deltaTime)
    if self.impl then
        self.impl:Update(deltaTime)
    end
end

return Skill