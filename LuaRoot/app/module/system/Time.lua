---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wangliang.
--- DateTime: 2018/5/16 下午4:55
---

local Floor,Max = math.floor,math.max
local time,date = os.time,os.date
--记录游戏时间，定义为玩家login后的时长，到玩家退出游戏
--此数据为纯表现使用，只缓存到本地
local Time = class("Time",require("app.base.DataModel"))
--realDay,realDayTime --真实时间，每次存档必须存，尸潮啥的按真实时间走
--gameDay,gameDayTime --游戏时间，仅用于天气

local REAL_DAY_SECONDS = 3600*24
local GAME_DAY_SECONDS = REAL_DAY_SECONDS*3
local UpdateBeat = UpdateBeat
local Timer = Timer
local Global = Global
local StorageEvent = StorageEvent

local saveFields = {"gameTime","saveTime"}
function Time:MarkSave()
    self:MarkFieldSave(saveFields)
end

function Time:Init()
    self.gameTime = 0
    self:PostImport()
end

function Time:PostImport()
    if self.saveTime then
        local lastSaveStr = date("%c",self.saveTime)
        print("last save time: ",lastSaveStr)
    end
    self.tick = 0
    self.canTick = false
    self.serverTimeDelta = 0
    self.realDay = Floor(self.gameTime / REAL_DAY_SECONDS)
    self.realDayTime = self.gameTime%REAL_DAY_SECONDS
    self.gameDay = Floor(self.gameTime/GAME_DAY_SECONDS)
    self.gameDayTime = self.gameTime%GAME_DAY_SECONDS
    self:EnableUpdate(true)
    local lastSaveTime = self.saveTime and self.saveTime or self:CurrentTime()
    self.dayDeltaTime = Floor(self:CurrentTime()/REAL_DAY_SECONDS - lastSaveTime/REAL_DAY_SECONDS)
end

function Time:AddTime(deltaTime)
    self.tick = self.tick + deltaTime
    if self.tick < 1 then return end
    self.tick = self.tick - 1
    self:OnTick()
end

function Time:OnTick()
    self.gameTime = self.gameTime + 1
    self.realDayTime = self.realDayTime + 1
    if self.realDayTime >= REAL_DAY_SECONDS then
        self.realDayTime = self.realDayTime - REAL_DAY_SECONDS
        self.realDay = self.realDay + 1
    end
    self.gameDayTime = self.gameDayTime + 1
    if self.gameDayTime >= GAME_DAY_SECONDS then
        self.gameDayTime = self.gameDayTime - GAME_DAY_SECONDS
        self.gameDay = self.gameDay + 1
    end
end

--
function Time:GetLocalTime()
    return time()
end

function Time:GetGameTime()
    return self.gameTime
end

function Time:GetDayDeltaTime()
    return self.dayDeltaTime
end

function Time:SetServerTime(serverTime)
    self.serverTimeDelta = serverTime - self:GetLocalTime()
end

function Time:CurrentTime()
    return self:GetLocalTime() + self.serverTimeDelta
end

function Time:EnableUpdate(benable)
    if benable then
        self.updateHandle = UpdateBeat:RegisterListener(self.Update,self)
    elseif self.updateHandle then
        UpdateBeat:RemoveListener(self.updateHandle)
        self.updateHandle = nil
    end
end

function Time:EnableTick(benable)
    self.canTick = benable
end

function Time:Update()
    if not self.canTick then return end
    local deltaTime = Timer.unscaledDeltaTime
    self:AddTime(deltaTime)
end

function Time:MakeDirty()
    self.saveTime = self:CurrentTime()
    self:MarkAllDirty()
end

function Time:NotifyPassTime()
    if not self.saveTime then return end
    local passTime = Max(0,self:CurrentTime() - self.saveTime)
    Global:FireEvent(StorageEvent.TIME_PASS,passTime)
end

return Time