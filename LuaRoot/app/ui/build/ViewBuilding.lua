local ViewBuilding = class("ViewBuilding", require("app.ui.UiView"))ViewBuilding.res = "buildmain"local LuaUtility = CS.Game.LuaUtilitylocal floor = math.floorlocal pairs = pairslocal _G = _Glocal Insert = table.insertlocal Remove = table.removelocal CfgData = _G.CfgDatalocal hostlocal bind = require("xlua.util").bindlocal FurnitureManagerlocal ViewType = {    BUILDROOT = 1,    FURNITURE = 2,}--===========================local function startBuild(sceneItemTid,buildDataId,consumeTid,consumeCount,updateId)    FurnitureManager:SetCreateInfo(sceneItemTid,buildDataId,consumeTid,consumeCount,updateId)    local cfg = CfgData:GetSceneItem(sceneItemTid)    local modelCfg = CfgData:GetModel(cfg.resId)    LuaUtility.CreateFurnitureItem(modelCfg.prefab,cfg.floorConditionId)end---todo:数量根据背包材料的合成来改变local ViewBuildItem = class("ViewBuildItem", require("app.ui.UiHandler"))function ViewBuildItem:Load(buildCfg, luaItem)    luaItem.Data:Inject(self)    self.buildCfg = buildCfg    self.matTid = buildCfg.materials1    self.matCount = buildCfg.quantity1    self.levelId = buildCfg.levelId    print("LevelID:::",valStr(buildCfg))    LuaUtility.ImgSetSprite(self.furIcon, buildCfg.icon, true)    local totalNum = host.dataModel.bag:TotalNum(self.matTid)    self:RefreshState(totalNum)    self:RegisterButtonClick(self.itemBtn, self.OnClick)endfunction ViewBuildItem:Release()    self:UnregisterButtonClick(self.itemBtn)endfunction ViewBuildItem:OnClick()    print("ClickBuildItem",self.levelId)    print("BUILDING INFO:",self.buildCfg.mapItemId,nil,self.matTid,self.matCount,self.levelId)    startBuild(self.buildCfg.mapItemId,nil,self.matTid,self.matCount,self.levelId)endfunction ViewBuildItem:RefreshState(totalNum)    local buildCount = self.matCount and floor(totalNum/self.matCount) or 0        LuaUtility.TextSetTxt(self.count,buildCount)        LuaUtility.SetButtonInteractable(self.itemBtn,buildCount>0)end--===========================local ViewFurnitureItem = class("ViewFurnitureItem", require("app.ui.UiHandler"))function ViewFurnitureItem:Load(buildDataModel, luaItem)    luaItem.Data:Inject(self)    self.luaItem = luaItem    self.id = buildDataModel.id    self.bagIndex = host.dataModel.bag:GetItemIndexById(buildDataModel.id)    self.sceneItemTid = buildDataModel:GetSceneModelTid()    self:RegisterButtonClick(self.itemBtn, self.OnClick)    LuaUtility.ImgSetSprite(self.furIcon, buildDataModel:GetIcon(), true)endfunction ViewFurnitureItem:Release(listView)    self:UnregisterButtonClick(self.itemBtn)    if listView then        LuaUtility.DynamicRemoveItem(listView,self.luaItem)    end    self.luaItem = nilendfunction ViewFurnitureItem:OnClick()    startBuild(self.sceneItemTid,self.id)endfunction ViewFurnitureItem:OnBagChange(index)    if self.bagIndex == index then        local newIndex = host.dataModel.bag:GetItemIndexById(self.id)        if newIndex then            self.bagIndex = newIndex        else            return true        end    endend--===========================function ViewBuilding:OnOpen()    host = HostPlayer    FurnitureManager = _G.FurnitureManager    LuaUtility.ComponenRenderVisible(_G.SceneEnv.placeManager, true)    self:RegisterButtonClick(self.closeBtn, self.OnCloseBtn)    --Create    self:RegisterButtonClick(self.placeBtn, self.OnPlaceBtn)    self:RegisterButtonClick(self.cancelBtn, self.OnCancelBtn)    self:RegisterButtonClick(self.rotateBtn, self.OnRotateBtn)    --Update    self:RegisterButtonClick(self.deleteBtn, self.OnDeleteBtn)    self:RegisterButtonClick(self.updateBtn, self.OnUpdateBtn)    self:RegisterEvents()    self:_InitBuildRoot()    self:_InitFurnitures()    self:InitClickState()    --todo: recode callback    _G.SceneEnv:SetBuildmodelOffset()    LuaUtility.EnableBuilding(true)    LuaUtility.ComponentGameObjVisible(self.btnFollow, false)    self:BindBuildEvent()endfunction ViewBuilding:OnClose()    LuaUtility.EnableBuilding(false)    LuaUtility.ComponenRenderVisible(_G.SceneEnv.placeManager, false)    LuaUtility.RecoverSceneFurnitures()    LuaUtility.SelectFurniture(nil)    _G.SceneEnv:RecoverBuildmodelOffset()    self:UnRegisterEvents()    self:UnBindBuildEvent()    self:UnregisterButtonClick(self.updateBtn)    self:UnregisterButtonClick(self.deleteBtn)    self:UnregisterButtonClick(self.rotateBtn)    self:UnregisterButtonClick(self.cancelBtn)    self:UnregisterButtonClick(self.placeBtn)    self:UnregisterButtonClick(self.closeBtn)    self:_ReleaseAllFurnitures()    host = nil    --FurnitureManager:Export(true)endfunction ViewBuilding:BindBuildEvent()    LuaUtility.BindBuildingStart(bind(self.BuildingStart, self))    LuaUtility.BindPlaceBuild(bind(self.BuildPlaced, self))    LuaUtility.BindBuildingSelect(bind(self.BuildingSelect, self))    LuaUtility.BindBuildingDelete(bind(self.BuildingDelete, self))    LuaUtility.BindBuildingUpdate(bind(self.BuildingUpdate,self))endfunction ViewBuilding:UnBindBuildEvent()    LuaUtility.BindBuildingUpdate(nil)    LuaUtility.BindBuildingDelete(nil)    LuaUtility.BindBuildingSelect(nil)    LuaUtility.BindPlaceBuild(nil)    LuaUtility.BindBuildingStart(nil)endfunction ViewBuilding:InitClickState()    self:SetButtonsState(ViewType.BUILDROOT)    self:SelectFurnitureView(ViewType.BUILDROOT)    self:RefreshSceneFurnitures(ViewType.BUILDROOT)endfunction ViewBuilding:RegisterEvents()    local btns = { self.buildBut, self.furnitureBut }    for i = 1, #btns do        self:RegisterButtonClick(btns[i],                function()                    self:SetButtonsState(i)                    self:SelectFurnitureView(i)                    self:RefreshSceneFurnitures(i)                    LuaUtility:CancelBuilding()                    LuaUtility.ComponentGameObjVisible(self.btnFollow, false)                end)    end    host:RegisterBagNotify(self.OnBagChange,self)endfunction ViewBuilding:UnRegisterEvents()    self:UnregisterButtonClick(self.furnitureBut)    self:UnregisterButtonClick(self.buildBut)    host:UnregisterBagNotify(self.OnBagChange,self)endfunction ViewBuilding:OnBagChange(index)    print("change bag!!!!!!")    local finded    local i = 0    --只有删除变动    if not self.furnitureItems then        return    end    while not finded and i < #self.furnitureItems do        i = i + 1        local viewItem = self.furnitureItems[i]        if viewItem:OnBagChange(index) then            finded = true            viewItem:Release(self.furnituresList)            Remove(self.furnitureItems,i)        end    end    self:RefreshBuildState()end--更新基础建筑数量function ViewBuilding:RefreshBuildState()    for _,buildItem in pairs(self.buildrootItems) do        local matCount = host.dataModel.bag:TotalNum(buildItem.matTid)        buildItem:RefreshState(matCount)    endendfunction ViewBuilding:SetButtonsState(index)    LuaUtility.SetButtonInteractable(self.furnitureBut, index == ViewType.BUILDROOT)    LuaUtility.SetButtonInteractable(self.buildBut, index == ViewType.FURNITURE)endfunction ViewBuilding:SelectFurnitureView(index)    LuaUtility.ComponentGameObjVisible(self.buildrootList, index == ViewType.BUILDROOT)    LuaUtility.ComponentGameObjVisible(self.furnituresList, index == ViewType.FURNITURE)endfunction ViewBuilding:RefreshSceneFurnitures(index)    LuaUtility.RefreshSceneFurnitures(index == ViewType.BUILDROOT)end--===========================function ViewBuilding:OnCloseBtn()    self:Close()endfunction ViewBuilding:OnPlaceBtn()    LuaUtility.PlaceFurniture()endfunction ViewBuilding:OnCancelBtn()    LuaUtility.ComponentGameObjVisible(self.btnFollow, false)    LuaUtility.CancelBuilding()endfunction ViewBuilding:OnRotateBtn()    LuaUtility.RotateFurniture()endfunction ViewBuilding:OnUpdateBtn()    --升级    print("SelectFUrniture:",self.selectId,FurnitureManager:GetFurniture(self.selectId),            FurnitureManager:GetFurniture(self.selectId):GetUpdateId())    local selectFurniture = FurnitureManager:GetFurniture(self.selectId)    if selectFurniture then        local updateId = selectFurniture:GetUpdateId()        if not updateId then            return        end        local cfg = _G.CfgData:GetFurniture(updateId)        local sceneItemTid = cfg.mapItemId        local sceneCfg = _G.CfgData:GetSceneItem(sceneItemTid)        local modelCfg = _G.CfgData:GetModel(sceneCfg.resId)        LuaUtility.UpdateFurnitureItem(modelCfg.prefab,sceneCfg.floorConditionId)        LuaUtility.ComponentGameObjVisible(self.btnFollow, false)    endendfunction ViewBuilding:OnDeleteBtn()    LuaUtility.ComponentGameObjVisible(self.btnFollow, false)    local canDelete = LuaUtility.CanDeleteSelectBuilding()    print("CanDELETE!!!!",canDelete)    if canDelete then        self.uiMnger:OpenView(ViewDeleteBuild)    else        LuaUtility.RecoverSelectBuilding()    endendfunction ViewBuilding:_GetFilterBuildRoot()    local rootbuilds = {}    local furnitureCfg = _G.CfgData:GetFurniture()    for _, cfg in pairs(furnitureCfg) do        if cfg.disappear == true then            Insert(rootbuilds,cfg)        end    end    return rootbuildsendlocal function createListViewItems(listView,items,listViewItemCls)    local listViewItems = {}    --读配置表,所有家具的id及图片信息等    print("bagItems:",valStr(items))    if items then        local itemIndex = 0        LuaUtility.SetLuaSimpleListCount(listView,#items)        LuaUtility.BindOnItemAdd(listView, function(item)            itemIndex = itemIndex + 1            local listViewItem = listViewItemCls.new()            listViewItem:Load(items[itemIndex], item)            listViewItems[itemIndex] = listViewItem        end)        LuaUtility.LuaSimpleListInit(listView)    end    return listViewItemsendfunction ViewBuilding:_InitBuildRoot()     self.buildrootItems =createListViewItems(self.buildrootList,self:_GetFilterBuildRoot(),ViewBuildItem)endfunction ViewBuilding:_InitFurnitures()    self.furnitureItems = createListViewItems(self.furnituresList,host.dataModel:GetBagBuildItems(),ViewFurnitureItem)endfunction ViewBuilding:_ReleaseAllFurnitures()    LuaUtility.ComponenRenderVisible(_G.SceneEnv.placeManager, false)    if self.buildrootItems then        for _, item in pairs(self.buildrootItems) do            item:Release()        end    end    self.buildrootItems=nil    if self.furnitureItems then        for _, item in pairs(self.furnitureItems) do            item:Release()        end    end    self.furnitureItems=nil    LuaUtility.UnBindOnItemAdd(self.buildrootList)    LuaUtility.UnBindOnItemAdd(self.furnituresList)    LuaUtility.ReleaseLuaSimpleList(self.buildrootList)    LuaUtility.ReleaseLuaSimpleList(self.furnituresList)endfunction ViewBuilding:SetBuildBtnState(focusFurnitureItem,isCreate)    LuaUtility.ComponentGameObjVisible(self.placeBtn,isCreate)    LuaUtility.ComponentGameObjVisible(self.cancelBtn,isCreate)    LuaUtility.ComponentGameObjVisible(self.deleteBtn,not isCreate)    LuaUtility.ComponentGameObjVisible(self.updateBtn,not isCreate)    LuaUtility.ComponentGameObjVisible(self.btnFollow, true)    LuaUtility.Follow3DBy2DFollowTransDelta(self.btnFollow, focusFurnitureItem:GetRootTrans(), 1, -2, 0)endfunction ViewBuilding:BuildingStart(viewModel)    self:SetBuildBtnState(viewModel,true)endfunction ViewBuilding:BuildingSelect(furnitureID)    local fiItem = FurnitureManager:GetFurniture(furnitureID)    if fiItem and fiItem.view then        self.selectId = furnitureID        LuaUtility.SelectFurniture(fiItem.view.view)        self:SetBuildBtnState(fiItem.view.view,false)    endendfunction ViewBuilding:BuildingDelete(furnitureID)    FurnitureManager:RemoveFurniture(furnitureID)endfunction ViewBuilding:BuildPlaced(viewModel,dir, index)    LuaUtility.ComponentGameObjVisible(self.btnFollow, false)    return FurnitureManager:BuildFurniture(viewModel,dir,index)endfunction ViewBuilding:BuildingUpdate(viewModel)    return FurnitureManager:BuildUpdate(self.selectId,viewModel)end_G.ViewBuilding = ViewBuilding