---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wangliang.
--- DateTime: 2018/4/13 下午7:38
---
local _G = _G
local SceneItemFactory = _G.SceneItemFactory
local CfgData = _G.CfgData
local random = math.random
local ipairs, pairs = ipairs, pairs
local Vector3 = _G.Vector3
local SceneEnv = SceneEnv

local BirthType = _G.Const.LocBirthType

local SceneItemManger = {
    items = {}, --id->sceneItems
    itemTags = {}, --id->changed
}

local function SafeRandom(min, max)
    if min == max then
        return min
    end
    local _min, _max = min, max
    if min > max then
        _min, _max = max, min
    end

    return random(_min, _max)
end

local function GetSceneItems(location)
    if not location.mapitems then
        return
    end
    local stageCfg = CfgData:GetStage(location.id)

    --得到场景每一类Item的数量
    local mapItemNum = {}
    if stageCfg.mapitemRandom then
        for i, v in ipairs(stageCfg.mapitemRandom) do
            mapItemNum[v] = SafeRandom(stageCfg.mapitemNumDown[i], stageCfg.mapitemNumUp[i])
        end
    end

    local nodropTypeList = {}
    local nodropTypeIndex = 1
    --得到每一类Item的数组
    local allMapItems = {}

    for i, v in ipairs(location.mapitems) do
        local dropType = CfgData:GetSceneItem(v.id).dropType
        if not dropType then
            nodropTypeList[nodropTypeIndex] = v
            nodropTypeList[nodropTypeIndex].uniqueID = i
            nodropTypeIndex = nodropTypeIndex + 1
        else
            if not allMapItems[dropType] then
                allMapItems[dropType] = {}
            end
            local index = #allMapItems[dropType] + 1
            allMapItems[dropType][index] = v
            allMapItems[dropType][index].uniqueID = i
        end
    end

    local result = {}
    for i, v in pairs(allMapItems) do
        local itemCounts = mapItemNum[i]
        local maxCount = #allMapItems[i]

        if not itemCounts then
            itemCounts = 0
            print("dropID:", i, "maxCount:", maxCount)
            print("<color=yellow>有配droptype的物体在关卡编辑中，但是配置里没有！</color>")
        end

        if maxCount <= itemCounts then
            for _, vv in pairs(v) do
                result[vv.uniqueID] = vv
            end
        else
            for count = 1, itemCounts do
                local random = SafeRandom(1, maxCount)
                local randomItem = allMapItems[i][random]
                result[randomItem.uniqueID] = randomItem
                allMapItems[i][random] = allMapItems[i][maxCount - 1]
                maxCount = maxCount - 1
            end
        end
    end

    for _, v in ipairs(nodropTypeList) do
        result[v.uniqueID] = v
    end
    return result
end

function SceneItemManger:Release()
    for _, sceneItem in pairs(self.items) do
        sceneItem.dataModel:UnregisterBoxChanged(self.OnBoxChanged,self)
        sceneItem:Release()
    end
    self.items = {}
    self.itemTags = {}
    self.stage = nil
end

function SceneItemManger:Add(item, loc, created)
    item:CacheLoc(loc)
    self.items[item:GetId()] = item
    if loc then
        local pos, dir = self:getLocPosAndDir(loc)
        item:SetPos(pos)
        item:SetDir(dir)
        item:SetScale(Vector3.new(loc.scale[1], loc.scale[2], loc.scale[3]))
    end
    item:EnterStage()
    item:BindChangeNotify(self.OnSceneItemsChanged, self)
    if created then
        self:OnSceneItemsChanged(item.dataModel)
    end
    item.dataModel:RegisterBoxChanged(self.OnSceneItemsChanged,self)
end

function SceneItemManger:AddItemByTid(tid)
    local sceneItem = self:CreateItem(tid)
    sceneItem:Born(tid)
    self:Add(sceneItem)
    return sceneItem
end

function SceneItemManger:Remove(item)
    self.items[item:GetId()] = nil
    item.dataModel:UnregisterBoxChanged(self.OnSceneItemsChanged,self)
    item:Release()
end

function SceneItemManger:GetItem(id)
    return self.items[id]
end

function SceneItemManger:EnterStage(stage)
    self.stage = stage
    local location = stage:GetLocation()
    if stage.items then
        self:GenByImport(location, stage.items)
    else
        self:GenByLocation(location)
    end
end

function SceneItemManger:GenByImport(location, data)
    if not data then
        return
    end
    for _, itemData in pairs(data) do
        local item = SceneItemFactory:CreateById(itemData.tid)
        item:Import(itemData)
        local loc = self:getLoc(location, itemData.locIndex)
        self:Add(item, loc)
    end
end

--本地配置生成场景物体
function SceneItemManger:GenByLocation(location)
    local sceneItems = GetSceneItems(location)
    if not sceneItems then
        return
    end

    local locs = sceneItems
    if locs then
        for i, loc in pairs(locs) do
            self:Add(self:CreateItem(loc.id, i), loc, true)
        end
    end
end

function SceneItemManger:getLoc(location, locIndex)
    return location.mapitems[locIndex]
end

function SceneItemManger:CreateItem(tid, locIndex)
    local item = SceneItemFactory:CreateById(tid)
    item:Born(tid)
    item:SetLocInfo(locIndex)
    return item
end

function SceneItemManger:getLocPosAndDir(loc)
    local x = loc.pos[1]
    local z = loc.pos[3]
    local pos = Vector3.new(x, 0, z)
    if loc.birth == BirthType.CIRCLE then
        local delta = Vector3.new(random(-1, 1), 0, random(-1, 1)):setNormalize()
        pos = pos + delta:mul(loc.radius)
    end
    pos.y = SceneEnv:GetTerrainHeight(pos.x, pos.z)
    local dir = loc.dir
    return pos, Vector3.new(dir[1], dir[2], dir[3])
end

function SceneItemManger:Export(modified)
    print("<color=green>export sceneitem manager</color>", modified)
    local itemDatas = self.stage.items
    if not itemDatas then
        itemDatas = {}
    end
    local modDatas
    for id, changed in pairs(self.itemTags) do
        if changed then
            self.itemTags[id] = false
            local item = self.items[id]
            local idStr = tostring(id)
            if not item then
                itemDatas[idStr] = nil
            else
                local data, mod = item:Export(modified)
                itemDatas[idStr] = data
            end
            if modified then
                if not modDatas then
                    modDatas = {}
                end
                modDatas[idStr] = modified
            end
        end
    end

    return itemDatas, modDatas
end

function SceneItemManger:OnSceneItemsChanged(itemData)
    local id = itemData.id
    if id then
        self.stage:MarkItemDirty()
        self.itemTags[id] = true
    end
end

_G.SceneItemManger = SceneItemManger