---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wangliang.
--- DateTime: 2018/3/29 下午4:01
---
local Radar = class("Radar")
local linkedAoi
local _G = _G
local pairs = pairs
local bind = require("xlua.util").bind
local swap = {}

function Radar:ctor(user,radius)
    self.user = user
    self:SetRadius(radius)
    linkedAoi = LinkedAoi
end

function Radar:RegisterCallback(entityIn,entityMod,entityOut, entityOutBorder)
    self.insight = {}
    self.insightCall = bind(self.Insight,self)
    self.entityIn = entityIn
    self.entityOut = entityOut
    self.entityMod = entityMod
    self.entityOutBorder = entityOutBorder
end

function Radar:SetRadius(radius)
    self.radius = radius
end

function Radar:Release()
    self.insight = nil
    self:RegisterCallback()
end

function Radar.Select(entity)
    return entity.isMonster and entity:GetRadarIcon()
end

function Radar:OnUpdate(deltaTime)
    if not self.insight then return end
    swap = {}
    linkedAoi:FindInSight(self.user,self.radius,Radar.Select,self.insightCall)
    self:CheckBorder()
    self:CheckLeft()
end

function Radar:Insight(entity,delta)
    if swap[entity.objId] then return end
    local normalDelta = delta*(1/self.radius)
    if not self.insight[entity.objId] then
        self:CreateEntityInfo(entity,normalDelta)
    else
        self:ModifyEntityInfo(entity,normalDelta)
    end
end

function Radar:CreateEntityInfo(entity,normalDelta)
    local info ={normalDelta = normalDelta,dir = entity:GetDir(true),dead = entity.dataModel.dead,entity = entity}
    swap[entity.objId] = info
    if self.entityIn then
        self.entityIn(entity.objId,info)
    end
end

function Radar:ModifyEntityInfo(entity,normalDelta)
    if swap[entity.objId] then return end
    local oldInfo = self.insight[entity.objId]
    local distMod = normalDelta and (not normalDelta:equal(oldInfo.normalDelta)) or false
    if distMod then
        oldInfo.normalDelta =normalDelta
    end
    local dir = entity:GetDir()
    local dirMod = not dir:equal(oldInfo.dir)
    if dirMod then
        oldInfo.dir = dir:clone()
    end
    local deadMod = not (entity.dataModel.dead == oldInfo.dead)
    if deadMod then
        oldInfo.dead = entity.dataModel.dead
    end
    swap[entity.objId] = oldInfo
    self.insight[entity.objId] = nil
    if self.entityMod then
        self.entityMod(entity.objId,oldInfo,distMod,dirMod,deadMod)
    end
end

function Radar:CheckBorder()
    local  pos = self.user:GetPos()
    local posX, posZ = _G.SceneEnv:GetPlayerOffsetXZ(pos)
    if self.entityOutBorder then
        self.entityOutBorder(posX, posZ)
    end
end

function Radar:CheckLeft()
    for oid,_ in pairs(self.insight) do
        if not swap[oid] then
            if self.entityOut then
                self.entityOut(oid)
            end
        end
    end
    --host
    if not self.insight[self.user.objId] then
        self:CreateEntityInfo(self.user)
    else
        self:ModifyEntityInfo(self.user)
    end

    self.insight = swap
end



--传入旧的列表、离开响应、进入响应、变更响应，响应参数为ObjId，返回当前视野内所有
function Radar:Check(old,onOut,onIn,OnMod,caller)
    for oid,delta in pairs(old) do
        local newDelta = self.insight[oid]
        if not newDelta then
            onOut(caller,oid)
        elseif not newDelta:equal(delta) then
            OnMod(caller,oid,newDelta)
        end
    end
    for oid,delta in pairs(self.insight) do
        if not old[oid] then
            onIn(caller,oid,delta)
        end
    end
    return self.insight
end

return Radar